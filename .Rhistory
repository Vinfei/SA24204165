devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
pkgload::dev_help('name')
pkgload::dev_help('name')
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
tools::showNonASCIIfile("R/SSLASSO.R")
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
remove.packages("wpfSA24204165")
install.packages("D:/Rcode/StatisticalCalculation/wpfSA24204165_1.0.tar.gz", repos = NULL, type = "source")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
install.packages("D:/Rcode/StatisticalCalculation/wpfSA24204165_1.0.tar.gz", repos = NULL, type = "source")
git init
devtools::install_github("vinfei/wpfSA24204165", build_vignettes = TRUE, force=T)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
Noise <- function(yh, A, n) {
ynorm <- sqrt(n) * (yh / sqrt(diag(A)))
sd_hat0 <- mad(ynorm)
zeros <- (abs(ynorm) < 3 * sd_hat0)
y2norm <- sum(yh[zeros]^2)
Atrace <- sum(diag(A)[zeros])
sd_hat1 <- sqrt(n * y2norm / Atrace)
ratio <- sd_hat0 / sd_hat1
if (max(ratio, 1 / ratio) > 2) {
print("Warning: Noise estimate problematic")
}
s0 <- sum(zeros == FALSE)
return(list("noise_sd" = sd_hat1, "nz" = s0))
}
yh <- rnorm(100)
A <- matrix(rnorm(10000), nrow = 100, ncol = 100)
result <- Noise(yh, A, 100)
Noise <- function(yh, A, n) {
# Ensure that A's diagonal elements are positive before taking the square root
diag_A <- diag(A)
if (any(diag_A <= 0)) {
stop("Matrix A has non-positive diagonal elements.")
}
ynorm <- sqrt(n) * (yh / sqrt(diag_A))
sd_hat0 <- mad(ynorm)
zeros <- (abs(ynorm) < 3 * sd_hat0)
y2norm <- sum(yh[zeros]^2)
Atrace <- sum(diag_A[zeros])
sd_hat1 <- sqrt(n * y2norm / Atrace)
# Check for NaN or Inf values before calculating ratio
if (any(is.na(sd_hat0)) || any(is.na(sd_hat1)) || any(is.nan(sd_hat0)) || any(is.nan(sd_hat1))) {
stop("NaN or Inf values encountered in sd_hat0 or sd_hat1.")
}
ratio <- sd_hat0 / sd_hat1
if (max(ratio, 1 / ratio) > 2) {
warning("Noise estimate problematic")
}
s0 <- sum(zeros == FALSE)
return(list("noise_sd" = sd_hat1, "nz" = s0))
}
yh <- rnorm(100)
A <- matrix(rnorm(10000), nrow = 100, ncol = 100)
result <- Noise(yh, A, 100)
devtools::document()
devtools::document()
devtools::document()
rm(list = c("Noise"))
devtools::document()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
install.packages("D:/Rcode/StatisticalCalculation/wpfSA24204165_1.0.tar.gz", repos = NULL, type = "source")
remove.packages("wpfSA24204165")
devtools::install_github("vinfei/wpfSA24204165", build_vignettes = TRUE, force=T)
